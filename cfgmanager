-- BrandNew UI Library - Config Manager Module
-- This module can be loaded separately after the main UI library

-- Module wrapper
local ConfigManager = {}

-- Function to initialize the manager with the Library instance
function ConfigManager.Init(Library, tab, options)
    options = options or {}
    local side = options.side or "left"
    local sectionName = options.name or "Config Manager"
    local sectionDesc = options.description or "Save and load your configurations"
    local folderPath = options.folderPath or "BrandNew/Games/Universal/Configs"
    
    -- Create folder if it doesn't exist
    if not isfolder(folderPath) then
        makefolder(folderPath)
    end
    
    -- Create config section
    local ConfigSection = tab:Section({
        name = sectionName,
        description = sectionDesc,
        side = side
    })
    
    -- Helper function to get list of configs
    local function GetConfigList()
        local configs = {}
        
        if isfolder(folderPath) then
            for _, file in ipairs(listfiles(folderPath)) do
                if file:sub(-5) == ".json" then
                    local configName = file:match("([^/\\]+)%.json$")
                    table.insert(configs, configName)
                end
            end
        end
        
        return configs
    end
    
    -- Config name input
    ConfigSection:Textbox({
        name = "Config Name",
        placeholder = "Enter config name...",
        flag = "cm_config_name"
    })
    
    -- Selected Config Label
    ConfigSection:Label({
        name = "Selected: None",
        flag = "cm_selected_label"
    })
    
    -- List of configs
    local configList = GetConfigList()
    local selectedConfig = nil
    
    -- Config list section
    local ConfigListSection = tab:Section({
        name = "Saved Configs",
        description = "Click to select a configuration",
        side = side
    })
    
    local configButtons = {}
    
    -- Function to refresh config list
    local function RefreshConfigList()
        -- Clear existing buttons
        for _, button in pairs(configButtons) do
            if button and button.Objects and button.Objects.Holder then
                button.Objects.Holder:Destroy()
            end
        end
        
        configButtons = {}
        selectedConfig = nil
        
        -- Update label
        if Library.SetValue then
            Library.SetValue("cm_selected_label", "Selected: None")
        end
        
        -- Get updated list of configs
        local configs = GetConfigList()
        
        -- Create new buttons
        if #configs > 0 then
            for _, configName in ipairs(configs) do
                local newButton = ConfigListSection:Button({
                    name = configName,
                    description = "Click to select",
                    callback = function(self)
                        selectedConfig = configName
                        Library.Flags["cm_config_name"] = configName
                        
                        -- Update button colors
                        for _, btn in pairs(configButtons) do
                            if btn and btn.Objects and btn.Objects.Text then
                                Library.ChangeObjectTheme(btn.Objects.Text, {
                                    TextColor3 = "Dark Text"
                                })
                            end
                        end
                        
                        -- Highlight selected button
                        if self and self.Objects and self.Objects.Text then
                            Library.ChangeObjectTheme(self.Objects.Text, {
                                TextColor3 = "Accent"
                            })
                        end
                        
                        -- Update label
                        if Library.SetValue then
                            Library.SetValue("cm_selected_label", "Selected: " .. configName)
                        end
                        
                        Library.Notification({ name = "Config Selected", description = "'" .. configName .. "' selected." })
                    end
                })
                
                table.insert(configButtons, newButton)
            end
        else
            ConfigListSection:Label({
                name = "No configs found",
                description = "Save a config first"
            })
        end
    end
    
    -- Save config button
    ConfigSection:Button({
        name = "Save Config",
        description = "Save current settings",
        callback = function()
            local configName = Library.Flags["cm_config_name"]
            if not configName or configName == "" then
                configName = "default"
            end
            
            if not isfolder(folderPath) then
                makefolder(folderPath)
            end
            
            local path = folderPath.."/"..configName..".json"
            writefile(path, Library.GetConfig())
            Library.Notification({ name = "Config Saved", description = "Configuration '"..configName.."' has been saved." })
            
            -- Refresh the config list after saving
            RefreshConfigList()
        end
    })
    
    -- Load config button
    ConfigSection:Button({
        name = "Load Config",
        description = "Load selected configuration",
        callback = function()
            if not selectedConfig then
                Library.Notification({ name = "Error", description = "No config selected" })
                return
            end
            
            local path = folderPath.."/"..selectedConfig..".json"
            if isfile(path) then
                local data = readfile(path)
                Library.LoadConfig(data)
                Library.Notification({ name = "Config Loaded", description = "Configuration '"..selectedConfig.."' has been loaded." })
            else
                Library.Notification({ name = "Error", description = "Config file not found" })
                RefreshConfigList()
            end
        end
    })
    
    -- Delete config button
    ConfigSection:Button({
        name = "Delete Config",
        description = "Delete selected configuration",
        callback = function()
            if not selectedConfig then
                Library.Notification({ name = "Error", description = "No config selected" })
                return
            end
            
            local path = folderPath.."/"..selectedConfig..".json"
            if isfile(path) then
                delfile(path)
                Library.Notification({ name = "Config Deleted", description = "Configuration '"..selectedConfig.."' has been deleted." })
                selectedConfig = nil
                
                -- Update label
                if Library.SetValue then
                    Library.SetValue("cm_selected_label", "Selected: None")
                end
                
                RefreshConfigList()
            else
                Library.Notification({ name = "Error", description = "Config file not found" })
                RefreshConfigList()
            end
        end
    })
    
    -- Refresh list button
    ConfigSection:Button({
        name = "Refresh List",
        description = "Refresh the config list",
        callback = function()
            RefreshConfigList()
            Library.Notification({ name = "List Refreshed", description = "Config list has been updated." })
        end
    })
    
    -- Initialize the config list
    RefreshConfigList()
    
    -- Return the config manager object
    return {
        Section = ConfigSection,
        ListSection = ConfigListSection,
        RefreshList = RefreshConfigList,
        GetConfigList = GetConfigList
    }
end

return ConfigManager 
